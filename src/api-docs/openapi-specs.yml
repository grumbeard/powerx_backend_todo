openapi: 3.0.0
info:
  title: PowerX Backend Todo
  description: Capstone Project for PowerX Backend Module
  version: 1.0.0
servers:
  - url: https://grumbeard-powerx-todo.herokuapp.com
    description: Production server
  - url: /
    description: Development server (local)
components:
  schemas:
    Account:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          pattern: '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
          minLength: 4
          maxLength: 50
        password:
          type: string
          minLength: 8
          maxLength: 50
    TodoList:
      type: object
      required:
        - id
        - title
        - owner_id
        - access_list
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        title:
          type: string
          minLength: 1
        owner_id:
          type: integer
          format: int64
          minimum: 1
        access_list:
          type: array
          items:
            type: integer
            format: int64
        todos:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Item'
    Item:
      type: object
      required:
        - id
        - description
        - todo_list_id
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        description:
          type: string
          minLength: 1
        todo_list_id:
          type: integer
          format: int64
          minimum: 1
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: []
paths:
  /:
    get:
      tags:
        - app
      summary: Root
      security: []
      responses:
        '200':
          description: Returns message requesting login/register

  # AUTH
  /register:
    post:
      tags:
        - auth
      summary: Registers a new Account.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
            examples:
              account:
                summary: Example of Account
                value: 
                  email: "john.doe@example.com"
                  password: "12345678"
      responses:
        '200':
          description: JWT Token returned
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    type: string
                    nullable: false
        '401':
          description: Account with email already exists
        default:
          description: Unexpected error

  /login:
    post:
      tags:
        - auth
      summary: Login an existing Account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
            examples:
              account:
                summary: Example of Account
                value:
                  email: "john.doe@example.com"
                  password: "12345678"
      responses:
        '200':
          description: JWT Token returned
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    type: string
                    nullable: false
        '401':
          description: Invalid credentials provided
        default:
          description: Unexpected error
  
  # TODOLIST
  /todo:
    get:
      tags:
        - todolist
      summary: Get all TodoLists for logged in Account
      responses:
        '200':
          description: JSON array of TodoLists
          content:
            application/json:
              schema:
                type: array
                nullable: true
                items:
                  $ref: '#/components/schemas/TodoList'
              examples:
                todolists:
                  summary: Example of Todolists
                  value:
                    - id: 1
                      title: "My Todo List 1"
                      access_list: [1]
                      owner_id: 1
                      todos:
                        - id: 1
                          description: "buy milk"
                          todo_list_id: 1
                        - id: 2
                          description: "pick up sticks"
                          todo_list_id: 1
                    - id: 2
                      title: "My Todo List 2"
                      access_list: [2, 1]
                      owner_id: 2
                      todos:
                        - id: 3,
                          description: "buy eggs"
                          todo_list_id: 2
                        - id: 4,
                          description: "pick up stones"
                          todo_list_id: 2
        default:
          description: Unexpected error
    post:
      tags:
        - todolist
      summary: Create a TodoList
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  minLength: 1
                todos:
                  type: array
                  items:
                    type: string
                    minLength: 1
            examples:
              todolist-details:
                summary: Example of TodoList details
                value:
                  title: "My Todo List 1"
                  todos:
                    - id: 1
                      description: "buy milk"
                      todo_list_id: 1
                    - id: 2
                      description: "pick up sticks"
                      todo_list_id: 1
      responses:
        '201':
          description: Created  TodoList returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoList'
              examples:
                todolist:
                  summary: Example of Todolist
                  value:
                    id: 1
                    title: "My Todo List 1"
                    access_list: [1]
                    owner_id: 1
                    todos:
                      - id: 1
                        description: "buy milk"
                        todo_list_id: 1
                      - id: 2
                        description: "pick up sticks"
                        todo_list_id: 1
        '400':
          description: Invalid TodoList details provided
        default:
          description: Unexpected error

  /todo/{id}:
    get:
      tags:
        - todolist
      summary: Returns a TodoList by ID
      parameters:
        - name: id
          in: path
          required: true
          description: TodoList ID
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: TodoList returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoList'
              examples:
                todolist:
                  summary: Example of Todolist
                  value:
                    id: 1
                    title: "My Todo List 1"
                    access_list: [1]
                    owner_id: 1
                    todos:
                      - id: 1
                        description: "buy milk"
                        todo_list_id: 1
                      - id: 2
                        description: "pick up sticks"
                        todo_list_id: 1
        '400':
          description: TodoList with this ID does not exist
        '403':
          description: Unauthorized to access this TodoList
        default:
          description: Unexpected error
    patch:
      tags:
        - todolist
      summary: Update a TodoList by ID
      parameters:
        - name: id
          in: path
          required: true
          description: TodoList ID
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                todos:
                  type: array
                  items:
                    type: string
                    minLength: 1
            examples:
              todolist-details:
                summary: Example of TodoList details
                value:
                  title: "My Todo List 1"
                  todos:
                    - id: 1
                      description: "buy milk"
                      todo_list_id: 1
                    - id: 2
                      description: "pick up sticks"
                      todo_list_id: 1
      responses:
        '200':
          description: TodoList returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoList'
        '400':
          description: TodoList does not exist
        '403':
          description: Unauthorized to update TodoList
        default:
          description: Unexpected error
    delete:
      tags:
        - todolist
      summary: Delete a TodoList by ID
      parameters:
        - name: id
          in: path
          required: true
          description: TodoList ID
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Deleted (Soft-Delete) TodoList returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoList'
              examples:
                todolist:
                  summary: Example of Todolist
                  value:
                    id: 1
                    title: "My Todo List 1"
                    access_list: [1]
                    owner_id: 1
                    todos:
                      - id: 1
                        description: "buy milk"
                        todo_list_id: 1
                      - id: 2
                        description: "pick up sticks"
                        todo_list_id: 1
        '400':
          description: TodoList does not exist
        '403':
          description: Unauthorized to delete TodoList
        default:
          description: Unexpected error
  
  /todo/{id}/access-list:
    post:
      tags:
        - todolist
      summary: Add registered Account to access list of TodoList by ID
      parameters:
        - name: id
          in: path
          required: true
          description: TodoList ID
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  pattern: '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'
                  minLength: 4
                  maxLength: 50
            examples:
              account-details:
                summary: Example of Account details
                value:
                  email: "jane.doe@example.com"
      responses:
        '200':
          description: Request to add Account to access list successfully sent
        '400':
          description: TodoList does not exist
        '403':
          description: Unauthorized to add Account to access list of this TodoList
        default:
          description: Unexpected error
          
  # ITEM
  /item:
    post:
      tags:
        - item
      summary: Create an Item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - description
                - todo_list_id
              properties:
                description:
                  type: string
                  minLength: 1
                todo_list_id:
                    type: integer
                    format: int64
                    minimum: 1
            examples:
              item-details:
                summary: Example of Item details
                value:
                  description: "buy bread"
                  todo_list_id: 1
      responses:
        '200':
          description: Created Item returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
              examples:
                item:
                  summary: Example of Item
                  value:
                    id: 1
                    description: "pick up sheep"
                    todo_list_id: 1
        '400':
          description: Invalid Item details provided
        '403':
          description: Unauthorized to create Item for this TodoList
        default:
          description: Unexpected error  
    
  /item/{id}:
    patch:
      tags:
        - item
      summary: Update an Item by Id
      parameters:
        - name: id
          in: path
          required: true
          description: Item ID
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - description
              properties:
                description:
                  type: string
                  minLength: 1
            examples:
                item_details:
                  summary: Example of Item details
                  value:
                    description: "put down sheep"
      responses:
        '200':
          description: Updated Item returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
              examples:
                item:
                  summary: Example of Item
                  value:
                    id: 1
                    description: "pick up sheep"
                    todo_list_id: 1
        '400':
          description: Item does not exist
        '403':
          description: Unauthorized to update Item
        default:
          description: Unexpected error
    delete:
      tags:
        - item
      summary: Delete an Item by Id
      parameters:
        - name: id
          in: path
          required: true
          description: Item ID
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Deleted (Soft-Delete) Item returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
              examples:
                item:
                  summary: Example of Item
                  value:
                    id: 1
                    description: "pick up sheep"
                    todo_list_id: 1
        '400':
          description: Item does not exist
        '403':
          description: Unauthorized to delete Item
        default:
          description: Unexpected error